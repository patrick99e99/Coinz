#! /usr/bin/env ruby

require 'net/http'
require 'json'
require 'yaml'

class Coinz
  API_URL = 'https://api.coinmarketcap.com/v1/ticker/'

  def initialize
    @total_in_usd = 0
    @total_in_btc = 0
    @total_in_eth = 0

    show_financial_status
  end

  private

  attr_accessor :total_in_usd, :total_in_btc, :total_in_eth

  def show_financial_status
    system 'clear'
    separator
    process_tokens
    separator
    total_amount
    separator
    puts
  end

  def process_tokens
    if tokens.any?
      ethereum_price_in_btc = data_for('ethereum', parsed_response)['price_btc'].to_f

      tokens.each do |ticker, amount|
        next if !amount || amount.zero?

        data = data_for(ticker, parsed_response)

        if !data
          puts "cannot find #{ticker}"
        else
          in_usd = data['price_usd'].to_f * amount
          in_btc = data['price_btc'].to_f * amount
          in_eth = in_btc / ethereum_price_in_btc

          puts "#{data['symbol']}: #{formatted_usd(amount)} @ $#{data['price_usd']} is worth: $#{formatted_usd(in_usd)} / #{formatted_crypto(in_btc)} BTC / #{formatted_crypto(in_eth)} ETH"

          self.total_in_usd += in_usd
          self.total_in_btc += in_btc
          self.total_in_eth += in_eth
        end
      end
    else
      puts "NO TOKENS FOUND! - Add them to tokens.yml"
    end
  end

  def formatted_usd(number)
    digits, fraction = number.to_s.split('.')
    [digits.reverse.gsub(/...(?=.)/,'\&,').reverse].tap do |output|
      if fraction
        output.concat(['.', fraction[0..1]])
      end
    end.join
  end

  def formatted_crypto(number)
    formatted = number.to_s.scan(/\d+\.\d{3}/).last
    formatted.nil? ? number : formatted
  end

  def data_for(ticker, parsed_response)
    parsed_response.find do |entry|
      entry['id'] == ticker
    end
  end

  def separator
    puts "*" * 100
  end

  def total_amount
    formatted_usd_total = formatted_usd(total_in_usd)
    formatted_btc_total = formatted_crypto(total_in_btc)
    formatted_eth_total = formatted_crypto(total_in_eth)
    puts "Total value of assets: $#{formatted_usd_total} / #{formatted_btc_total} BTC / #{formatted_eth_total} ETH"
  end

  def parsed_response
    @parsed_response ||= begin
      response_body = Net::HTTP.get(URI.parse(API_URL))
      JSON.parse(response_body)
    end
  end

  def tokens
    @tokens ||= YAML.load_file(File.join(File.dirname(__FILE__), 'tokens.yml'))
  end
end

Coinz.new
